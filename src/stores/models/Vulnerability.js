import { observable, action, computed } from 'mobx'

class Vulnerability {
  id
  @observable affected_software
  @observable cve_id
  @observable description
  @observable discovered_time
  @observable display_name
  @observable osvdb_id
  @observable published_time
  @observable references
  @observable short_description
  @observable title
  @observable updated_at

  constructor (vulnerability) {
    Object.assign(this, vulnerability)
  }

  @computed
  get isValid () {
    if (!this.affected_software) return false
    if (!this.cve_id) return false
    if (!this.description) return false
    if (!this.discovered_time) return false
    if (!this.published_time) return false
    if (!this.references) return false
    if (!this.short_description) return false
    if (!this.title) return false
    return true
  }

  @action
  setState (state) {
    Object.assign(this, state)
  }

  toJS () {
    return {
      id: this.id,
      affected_software: this.affected_software,
      cve_id: this.cve_id,
      description: this.description,
      discovered_time: this.discovered_time,
      display_name: this.display_name,
      osvdb_id: this.osvdb_id,
      published_time: this.published_time,
      references: this.references,
      short_description: this.short_description,
      title: this.title,
      updated_at: this.updated_at
    }
  }

  toPostApi () {
    return {
      affected_software: this.affected_software,
      cve_id: this.cve_id,
      description: this.description,
      discovered_time: this.discovered_time,
      display_name: this.display_name,
      osvdb_id: parseInt(this.osvdb_id, 10),
      published_time: this.published_time,
      references: this.references,
      short_description: this.short_description,
      title: this.title
    }
  }

  toPutApi () {
    const record = this.toPostApi()
    record.id = this.id
    return record
  }

  toShow () {
    return {
      ID: this.id,
      CVE: this.cve_id,
      title: this.title,
      short_description: this.short_description,
      description: this.description,
      affected_software: this.affected_software,
      references: this.references,
      discovered_time: this.discovered_time,
      published_time: this.published_time,
      updated_at: this.updated_at
    }
  }

  static fromJS (vulnerability) {
    return new Vulnerability(vulnerability)
  }
}

export default Vulnerability

