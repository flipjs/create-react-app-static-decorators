import React, { Component, PropTypes } from 'react'
import { withRouter } from 'react-router'
import { observer } from 'mobx-react'
import ContentHeader from '../layouts/ContentHeader'
import RecordSection from '../shared/RecordSection'
import VulnerabilitiesSection from '../vulnerabilities/VulnerabilitiesSection'
import ExploitTargetsSection from '../exploit-targets/ExploitTargetsSection'
import { NOTIFICATION_TYPES } from '../../constants'

import { Vulnerabilities, ExploitTargets } from '../../stores/collections'
import { Vulnerability, ExploitTarget } from '../../stores/models'
import { ApiVulnerabilities, ApiExploitTargets } from '../../api/models'
import { ui } from '../../stores'

const NAME = 'VulnerabilityRecordView'

const propTypes = {
  params: PropTypes.object.isRequired,
  router: PropTypes.object.isRequired
}

export class VulnerabilityRecordView extends Component {
  vulnerabilities = new Vulnerabilities(new ApiVulnerabilities(Vulnerability, 'vulnerabilities'), ui)
  relatedVulnerabilities = new Vulnerabilities(new ApiVulnerabilities(Vulnerability, 'vulnerabilities'), ui)
  relatedExploitTargets = new ExploitTargets(
    new ApiExploitTargets(ExploitTarget, 'exploit_targets'),
    ui
  )

  componentWillMount () {
    this.loadSelected(this.props.params.id)
  }

  componentWillReceiveProps (nextProps) {
    this.loadSelected(nextProps.params.id)
  }

  componentWillUnmount () {
    this.cleanUp()
  }

  cleanUp () {
    this.vulnerabilities = null
    this.relatedVulnerabilities = null
    this.relatedExploitTargets = null
  }

  fetchData (id) {
    this.vulnerabilities.fetchById(id)
      .then(record => {
        this.vulnerabilities.setSelected(record)
        this.fetchRelated(record)
      })
      .catch(error => this.redirectToPage404(error))
  }

  fetchRelated (record) {
    this.relatedVulnerabilities.api.setUrl(`vulnerabilities/${record.id}/vulnerabilities`)
    this.relatedVulnerabilities.clearSelected()
    this.relatedVulnerabilities.fetchAll()
    this.relatedExploitTargets.api.setUrl(`vulnerabilities/${record.id}/exploit_targets`)
    this.relatedExploitTargets.clearSelected()
    this.relatedExploitTargets.fetchAll()
  }

  loadSelected (id) {
    if (id) {
      this.fetchData(id)
    }
  }

  redirectToPage404 (error) {
    this.showNotification(NOTIFICATION_TYPES.ERROR, error.message)
    this.props.router.push('/404')
  }

  showNotification (type, message) {
    this.vulnerabilities.ui.setNotification({
      title: this.vulnerabilities.displayName,
      level: type,
      message
    })
  }

  render () {
    return (
      <section role='main' className='content-body'>
        <ContentHeader viewTitle='Vulnerabilities' />
        <RecordSection store={this.vulnerabilities} />
        <ExploitTargetsSection
          store={this.relatedExploitTargets}
          title='Related Exploit Targets'
          actionsDisabled
        />
        <VulnerabilitiesSection
          store={this.relatedVulnerabilities}
          title='Related Vulnerabilities'
          actionsDisabled
        />
      </section>
    )
  }
}
VulnerabilityRecordView.displayName = NAME
VulnerabilityRecordView.propTypes = propTypes

export default withRouter(observer(VulnerabilityRecordView))
